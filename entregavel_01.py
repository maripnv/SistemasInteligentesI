# -*- coding: utf-8 -*-
"""Entregavel01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NKL6p6Ytqb8D6njwAtuXwPat8UNeAQPg
"""

#######################################################
# Entregável 01: Backtracking - Sistemas inteligentes I
# Professor: Rafael G. Mantovani
# Estudantes: Filipe Parreira, Lucas Santana e Mariana Naves
# Data: 27/10/2024
#######################################################


def busca_retrocesso(grafo, inicial):
    # Inicialização das listas
    LE = []  # Lista de estados no caminho atual
    LNE = [inicial]  # Lista de novos estados
    BSS = []  # Lista de becos sem saída
    EC = inicial  # Estado corrente / atual

    while LNE !=[]:
        print(f"\nEstado Corrente (EC): {EC}")
        print(f"Lista de Estados no Caminho (LE): {LE}")
        print(f"Lista de Novos Estados (LNE): {LNE}")
        print(f"Lista de Becos Sem Saída (BSS): {BSS}")

        # Se encontramos o objetivo, retornar o caminho
        if EC == objetivo:
          LE.append(inicial)  # Adiciona 'A' no final do caminho
          return [inicial] + LE

        if not grafo[EC]:  # Verifica se EC não tem filhos
            while LE != [] and EC == LE[0]:  # Enquanto LE não estiver vazio e EC for o primeiro em LE
            # Marcar como beco sem saída
              BSS.append(EC) # Acrescenta EC em BSS;
              LE.pop(0)  # Remove o primeiro elemento de LE
              LNE.pop(0)  # Remove o primeiro elemento de LNE
              EC = LNE[0]
              LE.append(EC) # Acrescenta EC em LE;
        else:
            # Adicionar filhos de EC a LNE, exceto os já em BSS, LE ou LNE
            for filho in grafo[EC]:
                if (filho not in BSS) and (filho not in LE) and (filho not in LNE):
                    LNE.append(filho)
            # Atualiza EC para o primeiro elemento de LNE
            EC = LNE.pop(0)  # Atualiza EC para o próximo em LNE
            if EC != inicial:
              LE.append(EC) # Acrescenta EC em LE;
    return "Falha"

# Definição do grafo
grafo = {
    'A': {'B': 100, 'C': 125, 'D': 100, 'E': 75},
    'B': {'A': 100, 'C': 50, 'D': 75, 'E': 125},
    'C': {'A': 125, 'B': 50, 'D': 100, 'E': 125},
    'D': {'A': 100, 'C': 100, 'B': 75, 'E': 50},
    'E': {'A': 75, 'B': 125, 'C': 125, 'D': 50}
}

inicial = 'A'
objetivo = 'E'

resultado = busca_retrocesso(grafo, inicial)
print("Caminho encontrado:", resultado)